{-
Testing Techniques
Assignment 4: Model-Based Testing with TorXakis
===================================================
Anass Fakir, Engin KirmiziyÃ¼z, Okan Ok, Niels Okker
-}

{- States: Insert & Replace -}

-- ----------------------------------------------------- --
TYPEDEF  VimCommand
    ::=
          E_i
        | E_I
        | E_a
        | E_A
        | E_o
        | E_O 
        | E_gI
        | E_gi
        | E_s
--      | E_S 
        | E_cc
        | E_C 
ENDDEF

TYPEDEF Komando
    ::=
          Insert {
              mode :: VimCommand
            ; arg :: String
          }
ENDDEF

TYPEDEF Output
    ::=
          Output {
              state :: VimState
            ; arg :: String
          }
ENDDEF

-- ----------------------------------------------------- --
TYPEDEF  VimState
    ::=
          V_Normal
        | V_Insert
ENDDEF

-- ---------------------------------------------------------- --

PROCDEF komandoTrans [ In :: Komando; Out :: Output]  ()
    ::=
            In ? x [[ strinre(arg(x), REGEX('[a-zA-Z0-9]*')) ]] >->
            Out ! Output(V_Insert, arg(x))
            >->
            komandoTrans [In, Out] ()
ENDDEF





-- ----------------------------------------------------- --

CHANDEF  Chans  ::=  Stim :: Komando ;
                     Resp :: Output
ENDDEF

-- ----------------------------------------------------- --

MODELDEF  Mod
 ::=
     CHAN IN    Stim
     CHAN OUT   Resp

     BEHAVIOUR
                komandoTrans [ Stim, Resp ] ()
ENDDEF

-- ----------------------------------------------------- --

CNECTDEF  Sut
 ::=
     CLIENTSOCK

     CHAN OUT  Stim          HOST "localhost"  PORT 10000
     ENCODE    Stim ? qop     ->  ! toString(qop)

     CHAN IN   Resp          HOST "localhost"  PORT 10000
     DECODE    Resp ! fromString(s)    <-   ? s
ENDDEF



-- ----------------------------------------------------- --
-- ----------------------------------------------------- --
