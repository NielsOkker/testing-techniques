{-
Testing Techniques
Assignment 4: Model-Based Testing with TorXakis
===================================================
Anass Fakir, Engin KirmiziyÃ¼z, Okan Ok, Niels Okker
-}

{- States: Insert & Replace -}

-- ----------------------------------------------------- --
TYPEDEF  VimCommand
    ::=
          E_Esc
        | E_CtrlC 
        | E_i
        | E_I
        | E_a
        | E_A
        | E_o
        | E_O 
        | E_gI
        | E_gi
        | E_s
--      | E_S 
        | E_cc
        | E_C 
ENDDEF

FUNCDEF isInsertOperator ( x :: VimCommand ) :: Bool ::= 
    not (isReturnOperator(x))
ENDDEF

FUNCDEF isReturnOperator ( x :: VimCommand ) :: Bool ::= 
    (x == E_Esc) \/ (x == E_CtrlC)
ENDDEF

-- ----------------------------------------------------- --
TYPEDEF  VimState
    ::=
          V_Normal
        | V_Insert
ENDDEF

-- ---------------------------------------------------------- --


PROCDEF  vimTransition  [ In :: VimCommand; Out :: VimState ]  ()
    ::=
            In ?x [[isInsertOperator(x)]] >->
            Out !V_Insert >->
            In ?y [[isReturnOperator(y)]] >->
            Out !V_Normal >->
            vimTransition [In, Out] ()
        
ENDDEF


-- ----------------------------------------------------- --

CHANDEF  Chans  ::=  Stim :: VimCommand ;
                     Resp :: VimState
ENDDEF

-- ----------------------------------------------------- --

MODELDEF  Mod
 ::=
     CHAN IN    Stim
     CHAN OUT   Resp

     BEHAVIOUR
                vimTransition [ Stim, Resp ] ()
ENDDEF

-- ----------------------------------------------------- --

CNECTDEF  Sut
 ::=
     CLIENTSOCK

     CHAN OUT  Stim          HOST "localhost"  PORT 10000
     ENCODE    Stim ? qop     ->  ! toString(qop)

     CHAN IN   Resp          HOST "localhost"  PORT 10000
     DECODE    Resp ! fromString(s)    <-   ? s
ENDDEF

-- ----------------------------------------------------- --
-- ----------------------------------------------------- --
